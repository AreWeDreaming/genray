# makefile for GENRAY, MPI

# N.Ershov 
# 24 Jan, 2003,   BH updates.
# USAGE: 
# make 		- as usual make
# make rebuild	- rebuild whole program
# make clean	- remove all *.o files

#Make sure have intel environment:
#module list
#Else switch environment:
#For example: module swap PrgEnv-pgi PrgEnv-intel

#make sure have netcdf libraries and includes:
#module load netcdf

#Invoke the executable with a batch script, using aprun.
#See, for example, 00_Genray_Regression_Tests/test7/mpi_batch_run

#2013-4:  
#SWIM switched from pathscale to intel compiler.
#On edison.nersc.gov, for intel compiler and SWIM env need:
#source ~/my_ips_trunk/swim.bashrc.hopper
#module show netcdf [will show netcdf env variables]
#However, the 2014 default Intel environment on edison, plus 
# module load netcdf,  was enough to get an executable [BH141113].

# IF mpi.ins was changed in /mpi/ directory, before building this executable, 
# first build new 'auto' and 'cmm' in /mpi/ directory:
#          cd mpi
#          rm auto
#          rm cmm
#          make
#          ..... 
#          cd ..
#(It is a good practice to do it for each updated GENRAY version)


#130511:  Adjusted, Get executable, [BH]  
#130912:  Adjusted, Get executable, [BH]  

#BH180125: Updated the makefile, based on what recently worked for cql3d.
#          module unload darshan; module load cray-netcdf

#BH190925: Changed suffix in NAME from edison to cori, and recompiled.

# Per 2020-01-16 - Johannes Blaschke (NERSC):  -----------------------------------
# 1. Add `-lX11` to the LIBS variable (Note that the LIBRARIES variable is no longer
# used. Instead the make file uses LIBS). So LIBS should read:
# ```
# LIBS = $(LOCATION) -lpgplot -lX11
# ```
# (note the `-lnetcdf` `-lnetcdff` flags are
# also no longer needed, cf. point 2 below)
# 2. You should rely on the compiler wrappers to find all loaded module libraries
# (such as NetCDF). So you don't need to manually include `$(NETCDF_DIR)` and
# `-lnetcdf`, etc. The compiler wrapper already does that if the `cray-netcdf` module
# has been loaded. You can find out what the compiler wrapper already contains by
# running `cc -v` or `ftn -v`.
# 3. The location of your `pgplot` library now needs to be included in `LOCATION`.
# ```
# LOCATION= -L/global/cfs/cdirs/m77/CompX/pgplot.intel
# (or whatever the path is)
# ```
# Also add into your cori_batchscript_mpi  file, just before srun line:
#  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/global/cfs/cdirs/m77/CompX/pgplot.intel
# --------------------------------------------------------

SHELL=		/bin/sh
NAME=		xgenray_mpi_intel.cori
COMPILER=	ftn -g
BUILDER=	$(COMPILER)
INCLUDES=	antenna.i adj.i bripplb.i cefield.i cone.i dskin.i eps.i\
		emissa.i five.i fourb.i gr.i grill.i ions.i\
		limit.i  loopb.i nperpcom.i\
		lsc_approach.i  lsc_approach_nml.i  lsc_approach_no_nml.i \
		name_lsc_approach_nml.i \
		name.i name_eccone.i name_genr.i name_grill.i \
		name_non_uniform_mesh_profiles_line.i \
		name_tokamak.i name_uniform_mesh_profiles.i \
		output.i one.i \
		onetwo.i oxb.i\
		rho.i six.i spline_distrib.i three.i \
		transport_prof.i \
		write.i writencdf.i \
		commons.i param.i  rrange.i n_parb.i rkutta.i \
		globcd.h globcd1.h globcd2.h
#		netcdf.inc
SOURCES=		abc.f   absorpfw.f absorplh.f   arrays.f \
		abhay_disp.f \
		adj_sub.f adj_vmlibpr.f adj_orbit.f adj_control.f \
		b.f  bcast.f besk.f besk2as.f bessel.f   bound.f \
		bess_slatec.f besvec.f cn.f \
		chamber_wall.f \
		cninit.f   cnpermuz.f  coldm.f   complx.f  cone_ec.f \
		contour.f croot.f  curba.f curba_GA.f \
		combine_disp.f \
		dcom16.f dddrz1.f dense.f dinit.f\
		dmnf.f dskin.f dten16.f dxdphi.f   dxdr.f   dxdz.f \
		dydphi.f   dydr.f   dydz.f   efield.f  efield1.f \
		equilib.f emission.f emission_spectrum.f  eric_disp.f \
		flown.f  forest.f fokker.f  gamma.f \
		gr2new.f    gr3.f grill_lh.f   hamilmuz.f   hamilt1.f\
		hamilt_lambda.f lh_bonoli_disp.f lh_scattering.f limiter.f \
		lin_liu_curnt.f lh_ql_flux.f lsc_approach.f \
		mathcurb.f   mk_graph.f mmdei.f  mullerfun2.f  ninit_ec.f \
		netcdfr3d.f number1.f \
		outinit.f   output.f  outputb1.f  ono_disp.f oxb.f \
		partner.f plasmray.f \
		prep3d.f  prepripl.f  rhospl.f   rk_new.f \
		read_write_genray_input.f \
		rkb1.f rside1.f  relat_tens.f scatperp.f shkarofs.f \
		rsideb1.f   s.f   sdr1.f   se.f   spline.f spldens.f \
		slatec_ram.f \
		stop.f tensrcld.f \
		uertst.f   ugetio.f   uspkd.f \
		write3d.f x.f   y.f wconvini.f zcunix.f \
		zfunc.f   zr_psith.f zfun_cur.f
OBJECTS=	$(SOURCES:.f=.o)
MPIOBJS=	$(SOURCES:.f=.mpio)
F90SRCS=	kind_spec.f90 const_and_precisions.f90 quanc8.f90 config_ext.f90 green_func_ext.f90
F90OBJS=	$(F90SRCS:.f90=.o)

#LOCATION= -L../pgplot.intel  # Local, at my home directory
LOCATION= -L/global/cfs/cdirs/m77/CompX/pgplot.intel

LIBS = $(LOCATION) -lpgplot -lX11

DEBUG=		
#CSPECIAL= -ieee	
OPTIMIZE  = -fast
CSPECIAL= -O1 -check bounds -check pointers
BSPECIAL=	

#COMPILE=	$(COMPILER) -c $(CSPECIAL) $(DEBUG) -I $(INCLUDE)
COMPILE=	$(COMPILER) -c $(CSPECIAL) $(INCLUDE) $(OPTIMIZE)
#BUILD=		$(BUILDER) -o $(NAME) $(BSPECIAL) $(DEBUG)
BUILD=		$(BUILDER) -o $(NAME) $(BSPECIAL) $(OPTIMIZE)
PROTECT=	chmod 755
DELETE=		rm -f

$(NAME):	$(F90OBJS) $(MPIOBJS) genray_par.mpio
	mkdir TMP | echo -n
	mv *.o TMP | echo -n
	rename .mpio .o *.mpio  | echo -n
#	$(BUILDER) -o $(NAME) $(F90OBJS) $(OBJECTS) genray_par.o $(LIBRARIES)
	$(BUILDER) -o $(NAME) $(F90OBJS) $(OBJECTS) genray_par.o $(LIBS)
	chmod 755 $(NAME)
	rename .o .mpio *.o | echo -n
	mv TMP/* . | echo -n
	rmdir TMP | echo -n
$(SOURCES):        $(INCLUDES)

$(F90OBJS): %.o: %.f90
	$(COMPILER) $< -c
#	$(COMPILER) $< -c $@

$(MPIOBJS): %.mpio: %.f 
	cp $< temp_mpi.f
	mpi/cmm -a temp_mpi.f
	mpi/cmm -p WRITE "write(*," temp_mpi.f
	mpi/cmm -p PAUSE "pause" temp_mpi.f
	mpi/cmm -p PRINT " print " temp_mpi.f
	$(COMPILER) -c temp_mpi.f $(INCLUDE) -o temp_mpi.o
	mv temp_mpi.o $@
	rm -f temp_mpi.f

genray_par.mpio:	genray.f mpi/mpi.ins
	cp genray.f temp_mpi.f
	mpi/cmm -a temp_mpi.f
	mpi/cmm -p WRITE "write(*," temp_mpi.f
	mpi/cmm -p PAUSE "pause" temp_mpi.f
	mpi/cmm -p PRINT " print " temp_mpi.f
	mpi/auto temp_mpi.f mpi/mpi.ins >genray_par.f
	$(COMPILER) -c genray_par.f $(INCLUDE) -o temp_mpi.o
	mv temp_mpi.o genray_par.mpio
	rm -f temp_mpi.f
	cp kind_spec.o kind_spec.mpio
	cp const_and_precisions.o const_and_precisions.mpio
	cp quanc8.o quanc8.mpio
	cp config_ext.o config_ext.mpio
	cp green_func_ext.o green_func_ext.mpio

clean:	
	rm -rf *.mpio temp_mpi* TMP *.o *.mod \
	genray_par.f | echo -n

#end

