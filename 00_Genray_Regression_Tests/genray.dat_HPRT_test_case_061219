 &genr
 r0x=1.0d0
 b0=1.0d0
 outdat='zrn.dat'
 stat='new'
 &end
!genray	  (nst fw waves)
!Normalization constants:
!-------------------------------------------------------------------------
! r0x (m) character length
! b0 (tl) character magnetic field
!-------------------------------------------------------------------------
!Parameters for output files
!--------------------------------------------------------------------------
!outdat*20     name of output file
!stat*3        status of output file
!--------------------------------------------------------------------------
!/tokamak/
!-------------------------------------------------------------------------
!Tokamak
!--------------------------------------------------------------------------
! Type of the radial coordinates
! indexrho (1 - s,2 - tf,3 - v,4 -sqrt(psi-psilim)
! -------------------------------------------------
! ipsi=1 calculation of contours psi(z,r)=const
!     =0 -reading of these contours from psi.bin file
! -------------------------------------------------
! ionetwo=1-calculation power and current radial
!           profiles, to the file onetwo.bin
!           0 - no calculations)
!--------------------------------------------------------------------------
! ieffic  chooses the formula for the current drive efficiency
!        =1 asymptotic symple formula (homogenius, nonrelativictic)
!        =2 asymptotic formula (East-Karney )
!        =3 asymptotic formula (curba subroutine)
!--------------------------------------------------------------------------
! psifactr (it should be 0 < psifactr =<1,  psifcatr ~1)
!         is the parameter for the creation of the limiter points
!         using the closed flux surface:  psi(r,z)=psisep*psifactr 
!         psifactr is a parameter (it must be .le.1) to avoid the
!         problems with the nonmonotonic psi function near the separatrix.
!--------------------------------------------------------------------------
!  deltripl is the relative amplitude of the ripple field at the
!         last flux surface (at rho=1)
!
!nloop    is number of toroidal field coils 
!
!i_ripple is the index to choose the ripple model
!         bripl_phi(z,r,phi)=(dF/dphi)/r=cos(N_loop*phi)*g(r,z)*N_loop/r
!         bripl_z(z,r,phi) =(dF/dz)    =sin(N_loop*phi)*(dg/dz)
!         bripl_r(z,r,phi) =(dF/dr)    =sin(N_loop*phi)*(dg/dr)
!         models for function g:	 
!         =1 the ripple model approximating the DIII-D field
!            g=beqd*reqd*deltripl*(r/rmax)**N_loop/N_loop 
!            beqd is the toroidal magnetic field at reqd (Tl)
!            reqd is the nominal major radius of the torus.
!            rmax is the max major radius at the last closed flux surface
!            r    is the major radius
!         =2 the ripple model using modified Bessel function I_0
!            g=beqd*reqd*deltripl*I_0(N_loop*rho(z,r))/(N_loop*I_(N_loop))
!----------------------------------------------------------
 &tokamak
 eqdskin="equilib.dat_HPRT_test_case_061219"
 indexrho=2
 ipsi=1
 ionetwo=1
 ieffic=2
 psifactr=0.99d0
 deltripl=0.00d0
 nloop=24
 i_ripple=1
 &end
!/wave/
!-------------------------------------------------------------------------
!Waves
!-------------------------------------------------------------------------
! frqncy frequency f=w/2pi in GHz
! ioxm ( 1 - om, -1  - xm )  wave mode
! ireflm-max number of reflections =1 for EC
! jwave  (0 - LH wave, -1 AW, 1 - EC wave) wave harmonic
! -------------------------------------------------
! istart  if start point outside the plasma=1 else=2
! if istart=1 use file namelist eccone, =2 use namelist grill
! if istart=3 it use namelist grill and the addional cxalculations in dinit
! to lauch the ECR ray inside  the plasma in the O_X mode
! conversion point (rhoconv,theta), Theta is a poloidal angle (degree)
! for mode conversion point. It is given in dinit.f 
!--------------------------------------------------------------------------
! delpwrmn - Minimum power in each ray, as a fraction of
!            starting power in the ray, after which ray is stopped.
!--------------------------------------------------------------------------
! ibw=0 it is not the direct launch of the Bernstein waves
!    =1 the direct launch of electron Bernstein wave from dhot tensor
!       The last case works only for istart=2 and grill_lh conditions 
!--------------------------------------------------------------------------
! i_vgr_ini =+1 the wave is directed into the plasma (in the initial point)
!           =-1 the wave is directed out the plasma (in the initial point
!---------------------------------------------------------------------------
! poldist_mx is the maximal polidal distance (m) along the ray
!            default=1.d+5
!----------------------------------------------------------------------------
 &wave
 frqncy=30.d-3
 ioxm=-1  ! Or use ioxm_n_npar=-1
! ioxm=1 
! ioxm_n_npar=1 !LH
! ioxm_n_npar=-1 !FW
 ireflm=2
 jwave=-1
 istart=2
 delpwrmn=1.d-200
 ibw=0
 i_vgr_ini=+1
 poldist_mx=5.0d0  
 &end

!/scatnper/
!-------------------------------------------------------------------------
!N_perpendicular scattering
!-------------------------------------------------------------------------
! iscat it is the switch for the n_perp scattering
!       iscat=1 the scattering swithed on,
!            =0 the scattering swithed off
!-------------------------------------------------
! rhoscat(1:nscat_n) small radii for the scattering location
!        The parameter nscat_n should be given in the param.i file
!
! The scattering of the polar angle deltheta will be
!      deltheta=dsqrt(2.d0*scatd)*ranorm(fseed)
! scatd(0) the mean square scattering angle (radians**2)
!          for the plasma boundary reflection points
!
! scatd(1:nscat_n) the mean square scattering angles (radians**2)
!          for the interior plasma boundary points
!-------------------------------------------------------------------
 &scatnper
 iscat=0
 scatd= 0.01, 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.01, 0.01
 rhoscat=     0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.95, 0.97
 &end

!/dispers/
!Dispersion relation
!-------------------------------------------------------------------------
! ib<=nbulk cyclotron resonance sort(=1 for ecr)
! the number in (1-y(ib)) for the multiplucation of the
! dispersion relation to delete the singularity
! -------------------------------------------------
! id gives form of the dispersion relation:
!	     =3 Appleton-Hartree;
!            =1 AN**4+BN**2+C=0
!            =2 N**2=(-B+ioxm*Sqrt(B**2-4AC))/2A;
!            =4 electron relativistic plasma from hermitian Mazzucato code
!            =5 electron relativistic plasma from total Mazzucato code
!            =6 hot non-relativistic plasma, hermitian plasma 
!            =7 electron relativistic plasma from Shkarofsky code
!            =8 Ono dispersion for fast waves
!            =9 hot non-relativistic plasma, full tensor
!------------------------------------------------
! iherm =1 hermit dielectric tensor, 2-full
!          it is for Mazzucato plasma
!------------------------------------------------------------------------
!Absorption:
!iabsorp -choise of Imag(N_perp) (N_perp is the perpendicular refractive index)
!-------------------------------------------------------------------------
! iabsorp=1 for EC waves from Mazzucato solver
!        =2 for LH waves
!        =3 for FW waves
!        =4 for EC and EBW waves from Forrest code
!        =5 for EC and EBW waves from Shkarofsky code
!        =6 for EC and BW anti-hermitian part relativistic tensor+
!                         hermitian_part (Forest code)
!-----------------------------------------------------------------------
! i_im_nperp chois of the metode to find Im_N_perp for hot plasma (iabsorp=4)
!            =1 as default
!-----------------------------------------------------------------------
! i_im_nperp=1 Im_N_perp=abs(ImD_full/(dD_hermitian/dReN_perp)) 
! i_im_nperp=2 (Re_N_perp,Im_N_perp) is the complex root 
!              (of the complex hot plasma dispersion relation)
!              calculated by Newton iterations with the numerical
!              derivatives (the chord method)
!------------------------------------------------------------------------
! The change of the dispersion relation and absorption
! near the gyro-frequency points
!-------------------------------------------------
! iswitch=1   To use the chage of the dispersion relation and
!             absorption
!        =0   Do not use the change of the dispersion relation and
!             absorption 
!     del_y   If the difference |1-nY(jy)|<del_y 
!             (jy=1-nbulk ,n=...-2,-1,0, 1,2,3,...)
!             then switch on the new 
!             given type of the disperion and absorption.
!   jy_d      is the type of plasma species 1<=jy<=nbulk
!   idswitch  is the type of the dispersion function near the 
!             gyro-frequency points
!             It can be equal 1,2,3,4,5,6
!   iabswitch is the type of the absorption near the gyro-frequency point  
!-----------------------------------------------------------------------
!   n_relt_harm is the number of EC harmonics used in anti-hermitian
!               dielectric tensor calculations  n=<n_relt_harm 
!   n_relt_intgr is the number of points for integration
!---------------------------------------------------------------------
!  flux=B~.B+E~.d(omega*eps_herm)/(domega).E
!   iflux=1 the flux will be calculculated using the the group velocity from
!           the choosed disperson relation (with given id) and the electric
!           field calculated for choosed iabsorp
!   iflux=2 the flux will be calculated using V_gr for the electron cold plasma
!           dispersion and polarization (using subroutine  grpde2)  
 &dispers
 ib=2 
 id=2
 iherm=1
 iabsorp=3
 iswitch=0
 del_y=5.d+2  
 jy_d=1 
 idswitch=2
 iabswitch=1
 n_relt_harm=5
 n_relt_intgr=50
 iflux=1
 i_im_nperp=2
 &end

!/numercl/
!------------------------------------------------------------------------
!Numerical method
!-------------------------------------------------------------------------
! irkmeth (0-constant 1-variable step 5 order,2- variable step in RK 4 order)
! ndim1 (number of the ray tracing equations)
! isolv=1 correction,=2 expl.solution
! idif=1 analit.differentiation,=2 numericle
! -------------------------------------------------
! nrelt   Maximum number of ray elements per ray.
!         Must be .le. nrelta (a parameter)
!--------------------------------------------------------------------------
! -------------------------------------------------
! Runge-Kutta method parameters
! -------------------------------------------------
! prmt1=tau initial= prmt(1)
! prmt2=tau final=prmt(2)
! prmt3=initial tau step=prmt(3)
! prmt4=required accuracy=prmt(4)
! prmt6=hprint=prmt(6) time period or poloidal distance for results output
! prmt9=ihlf=prmt(9)
!--------------------------------------------------------------------------
!   icorrect= switch for Hamiltonian correction in subroutine outpt
!   icorrect=0 switch off the correction
!           =1 switch on the correction
!-------------------------------------------------------------------------
! iout3d ='enable'    to create output 3d.dat file
!        ='disable'   not create output 3d.dat file
!--------------------------------------------------------------------------
! maxsteps_rk the maximal number of the time steps of the Runge-Kutta
!             solver (in default =10000)
!--------------------------------------------------------------------------
 &numercl
 irkmeth=2
 ndim1=6
 isolv=1
 idif=1
 nrelt=201
 prmt1=0.000d+00 
 prmt2=9.999d+05
 prmt3=1.000d-2
 prmt4=1.000d-3
 prmt6=1.000d-2
 icorrect=1
 iout3d='enable'
 maxsteps_rk=100000
 &end

!/output/
!----------------------------------------------------------------------
! iwcntr =1 genray.f will calculate the contours wb_c=n
!        =0 genray.f will not do it
! iwopen =1 mk_grapc will calculte open contours wb_c=n	(using contrb1)
!         2 mk_grapc will calculte close contours wb_c=n (using contrb2)
! iwj    =mk_grapc will calculate contours wb_cj=n, j is a kind of the plasma
!         component must be.le.nbulk, j=1 for the electron hirofriquency
!         j.ge.2  for the ion (j kind) hirofriquency
! itools =0 do not use mkgrtool
!        =1 to use mkgrtool
! i_plot_b =1 create figures for the magnetic field,density and temperature 
!             profiles in plot.ps file using subroutine map_b based on PGplot
! i_plot_b =0 do not write the b,n,T figures to plot.ps file 
!
! i_plot_d =1 create the dispersion function contours d(ReNperp,ImN_perp)
!             in plot.ps file using PGplot
! i_plot_d =0 do not create the dispersion function contours
!----------------------------------------------------------------------
 &output
 iwcntr=0
 iwopen=1
 iwj=1
 itools=0
 i_plot_b=0
 i_plot_d=0
 &end

!/plasma/
!-------------------------------------------------------------------------
!Plasma parameters
!-------------------------------------------------------------------------
! nbulk>=1 quantity of plasma components
!----------------------------------------------------
! izeff =0 zeff will be calculated using the given ions;
!          electron density will be calculated using ions;
!       =1 zeff is given, the ions component will be calculated;
!       =2 zeff and ions densities are given, but zeff does
!          not coordinate with the plasma components
!       =3 it uses eqdsk pres (pressure).Let temperature T_E=T_i
!          pres=dens1(k,1)*temp1(k,1)+
!          Sum(i=2,nbulk)(dens1(k,i)*temp1(k,i)
!          In this case we will calculate Zeff(rho),
!          dens_electron(rho) and T_e(rho)=T_i(rho)
!       =4 it uses eqdsk pres (pressure), the given temperature
!          profiles T_i(rho) (i=1,nbukl) and the given Z_eff(rho)
!          nbulk should be .ge. 3
!          pres=dens1(k,1)*temp1(k,1)+
!          Sum(i=2,nbulk)(dens1(k,i)*temp1(k,i)
!          In this case we will calculate dense(1)(rho),
!          dense(nbulk)(rho) and dense(nbulk-1)(rho)
! -----------------------------------------------------
! idens (0 - analytic, 1 - spline) representation of
! the density, temperature and zeff radial profiles
!---------------------------------------------------
!   temp_scale(ncompa),den_scale(ncompa) are the parameters to multiply
!   the given temperature and density profiles
! -----------------------------------------------------
! ndens is the number of points for the input radial density and 
!       temperature profiles
!       As default ndens=ndensa
! -----------------------------------------------------
 &plasma
 ndens=21
 nbulk=4
 izeff=0
 idens=1
 temp_scale(1)=1.d0
 temp_scale(2)=1.d0
 temp_scale(3)=1.d0
 temp_scale(4)=1.d0
 den_scale(1)=1.d0
 den_scale(2)=1.d0
 den_scale(3)=1.d0
 den_scale(4)=1.d0
 &end

!/species/
! plasma components charges charge(i)=mod(charge(i)/charge_electron)
! -----------------------------------------------------
! charge(1) =1 electrons
! charge(i) i=1,nbulk   charge(i+1) must be ge.charge(i)
! charge(i) i=1,nbulk
! -----------------------------------------------------
! plasma components mass dmass(i)=Mass(i)/Mass_electron
! -----------------------------------------------------
! dmas(1) 1 electrons
! dmas(i)   i=1,nbulk
! -----------------------------------------------------
 &species
 charge(1)=1.,
 charge(2)=1.,
 charge(3)=1.,
 charge(4)=6.d0
 dmas(1)=1.,
 dmas(2)=3674.,
 dmas(3)=1837.,
 dmas(4)=22044.d0
 &end

!/varden/
! the density variation
! -----------------------------------------------------
!   var0 is an amplitude of the density variation (del_n_0) (see 3.37...)
!   denm is the number of the poloidal mode in the density variation(l_theta)
!   denn is the number of the toroidal mode in the density variation(l_phi)
!   an   is the radial localization of the variation (rho_0)
!   sigman is the parameter that characterizes the radial thickness
!          of the density fluctuation    
! -----------------------------------------------------
 &varden
 var0=0d0
 denm=1.d0
 denn=15.d0
 an=0.5d0
 sigman=0.1d0 
 &end


!/denprof/
! -----------------------------------------------------
!Analytic radial profiles (idens=0). If idens=1, use dentab, etc.
!density
!dense(i)=(dense0(i)-denseb(i))*(1-rho**rn1de(i))**rn2de(i)+denseb(i)
!-----------------------------------------------------
!        if(izeff.eq.0) then
!           zeff will be calculated using the given ions;
!	    nbulk1=nbulk
!	 else
!           =1 zeff is given, the ions component will be calculated
!            if (nbulk.eq.1) nbulk1=1
!            if (nbulk.eq.2) then
!	         nbulk1=2
!	     endif
!            if (nbulk.gt.2) nbulk1=nbulk-2
!	 endif
! -----------------------------------------------------
! dense0(i)   central density in 10**19 m**(-3) i=1,nbulk1
! -----------------------------------------------------
! denseb(i)  edge density in 10**19 m**(-3) i=1,nbulk1
! -----------------------------------------------------
! rn1de(i) i=1,nbulk1
! -----------------------------------------------------
! rn2de(i) i=1,nbulk1
! -----------------------------------------------------
 &denprof
 dense0(2)=1.3677
 denseb(2)=0.450495
 rn1de(2)=1.5d+0
 rn2de(2)=1.6d+0
 dense0(3)=0.07178
 denseb(3)=0.023643
 rn1de(3)=1.5d+0
 rn2de(3)=1.6d+0
 dense0(4)=0.0840602
 denseb(4)=0.02768787
 rn1de(4)=1.5d+0
 rn2de(4)=1.6d+0
 &end

!/tpoprof/
! Ratio tpop=T_perp/T_parallel
! tpop(i)=(tp0(i)-tpb(i))*(1-rho**rn1tp(i))**rn2tp(i)+tpb(i)
! -----------------------------------------------------
! tp0(i) =           central T_perp/T_parallel i=1,nbulk
! -----------------------------------------------------
! tpb(i) =ateb(i)    boundary T_perp/T_parallel i=1,nbulk
! -----------------------------------------------------
! rn1tp(i) i=1,nbulk
! -----------------------------------------------------
! rn2tp(i)  i=1,nbulk
! -----------------------------------------------------

 &tpopprof
 tp0(1)=1.0d0
 tp0(2)=1.0d0
 tp0(3)=1.0d0
 tp0(4)=1.0d0
 tpb(1)=1.0d0
 tpb(2)=1.0d0
 tpb(3)=1.0d0
 tpb(4)=1.0d0
 rn1tp(1)=2.0d0
 rn1tp(2)=2.0d0
 rn1tp(3)=2.0d0
 rn1tp(4)=2.0d0
 rn2tp(1)=1.0d0
 rn2tp(2)=1.0d0
 rn2tp(3)=1.0d0
 rn2tp(4)=1.0d0
 &end

!/vflprof/
! drift velocty || B  
! vflow(i)=(vfl0(i)-vflb(i))*(1-rho**rn1vfl(i))**rn2vfl(i)+vflb(i)
! -----------------------------------------------------
! vfl0(i)     central vflow in m/sec  i=1,nbulk
! -----------------------------------------------------
! vflb(i)     boundary vflow in m/sec i=1,nbulk
! -----------------------------------------------------
! rn1vfl(i) i=1,nbulk
! -----------------------------------------------------
! rn2vf(i)  i=1,nbulk
! -----------------------------------------------------

 &vflprof
 vfl0(1)=0.0d+0
 vfl0(2)=0.0d+0
 vfl0(3)=0.0d+0
 vfl0(4)=0.0d+0
 vflb(1)=0.0d+0
 vflb(2)=0.0d+0
 vflb(3)=0.0d+0
 vflb(4)=0.0d+0
 rn1vfl(1)=2.d0
 rn1vfl(2)=2.d0
 rn1vfl(3)=2.d0
 rn1vfl(4)=2.d0
 rn2vfl(1)=1.0d0
 rn2vfl(2)=1.0d0
 rn2vfl(3)=1.0d0
 rn2vfl(4)=1.0d0
 &end


!/zprof/
! -----------------------------------------------------
! zeff=(zeff0-zeffb)*(1-rho**rn1zeff)**rn2zeff+zefb
! -----------------------------------------------------
! zeff0   central Z_eff
! zeffb   boundary Z_eff
! rn1zeff zeff=(zeff0-zeffb)*
! rn2zeff      (1-rho**rn1zeff)**rn2zeff+zefb
!-----------------------------------------------------
 &zprof
 zeff0=2.0d0
 zeffb=2.0d0
 rn1zeff=2.d0
 rn2zeff=1.d0
 &end

!/tprof/
! Average temperature tempe=(T_parallel+2*T_perp)/3
! tempe(i)=(te0(i)-teb(i))*(1-rho**rn1te(i))**rn2te(i)+teb(i)
! -----------------------------------------------------
! te0(i) =at0(i)    central temperature in kev	i=1,nbulk
! -----------------------------------------------------
! teb(i) =ateb(i)    boundary temperature in kev i=1,nbulk
! -----------------------------------------------------
! rn1te(i) i=1,nbulk
! -----------------------------------------------------
! rn2te(i)  i=1,nbulk
! -----------------------------------------------------

 &tprof
 ate0(1)=3.32d0
 ate0(2)=2.2576
 ate0(3)=2.2576
 ate0(4)=2.2576
 ateb(1)=0.15d0
 ateb(2)=0.102
 ateb(3)=0.102
 ateb(4)=0.102
 rn1te(1)=2.25d0
 rn1te(2)=2.25d0
 rn1te(3)=2.25d0
 rn1te(4)=2.25d0
 rn2te(1)=8.0d0
 rn2te(2)=8.0d0
 rn2te(3)=8.0d0
 rn2te(4)=8.0d0
 &end



!/grill/
!------------------LH/EBW-Starting-inside-plasma-----------------------
!  Grill conditions  for istart=2 (start point inside the plasma)
!----------------------------------------------------------------------
! i_n_poloidal =1         The input parameter is N_parallel(from grill).
!  (by default =1)        N_phi,N_theta are calculated from given N_parallel 
!                         N_rho=N_perpendicular(N_parallel) is determined 
!                         from the dispersion relation. It is directed
!                         along +,- gradient(psi) 
!
! i_n_poloidal =2         The input parameters: N_parallel(from grill)
!                         and  n_theta_pol. By default N_theta=0. 
!                         N_perpendicular(N_parallel) is determined 
!                         from the dispersion relation. 
!                         N_phi is calculated from N_parallel and N_theta
!                         N_rho is calculated form N_perpendicular, N_parallel
!                         and N_theta. 
!                         It is directed along +,- gradient(psi)
!
! i_n_poloidal=3          The given pvariables: N_parallel and the angle
!                         0<<ksi_nperp<<180 between the vector N_perpendicular 
!                         and gradient(psi). By default ksi_nperp=0.
!                         N_perpendicular(N_parallel) is determined 
!                         from the dispersion relation.
!                         N_phi,N_theta and N_rho are calculated from
!                         N_parallel,N_perpendicular and ksi_nperp.
!
! i_n_poloidal=4          The given variables:N_toroidal and
!                         N_poloidal. It case uses i_vgr_ini set in /waves/
!                         to choose the direction of the small radial N_rho
!                         component. To launch the ray inside the plasma
!                         i_vgr_ini=1 or to the plasma edge i_vgr_ini=-1 
!---------------------------------------------------------------------
! an_theta_pol            The poloidal refractive index component
!                         It is used for i_n_poloidal =2     
!                         By_default n_theta=0.
!----------------------------------------------------------------------
! psi_nperp               (degree) the angle 0<<ksi_nperp<<180
!                         between the vector N_perpendicular 
!                         and gradient(psi). By default ksi_nperp=0.
!---------------------------------------------------------------------
!  ngrill  is a number of the poloidal grill angles
!          It must be ngrill.le.ngrilla, ngrilla is parameter in param.i
!----------------------------------------------------------------------
!  igrillpw options specifying N_parallel power spectra
!           =1 power=powers/nnkpar, =2 power=sin**2x/x**2,
!----------------------------------------------------------------------
!  rhopsi0(1:ngrill) initial small radius for wave front
!                    (0<rhopsi0<1)
!  rhopsi0(i)=...    i=1,ngrill
!----------------------------------------------------------------------
!  thgrill(1:ngrill) poloidal  angle of grill, measured counter
!                    clockwise from horizontal through the
!                    magnetic axis (degrees).
!  thgrill(i)=...    i=1,ngrill (degree)
!---------------------------------------------------------------------
!  phigrill(1;ngrill) is a toroidal grill angle of grill
!                              (degrees)
!  phigrill(i)=... i=1,ngrill (degree)
!----------------------------------------------------------------------
! height(1:ngrill) is a poloidal length (m) of grill
!                 (giving poloidal power distribution of each grill).
! height(i)=...   i=1,ngrill
!----------------------------------------------------------------------
! nthin(1:ngrill) is a number of rays near the each poloidal
!                 center, simulating a grill
! nthin(i)=...    i=1,ngrill
!----------------------------------------------------------------------
!  anmin(1:ngrill)  position of the left bound
!                   of power spectrum P(n_parallel) (Can be neg).
!  anmin(i)=...     i=1,ngrill
!----------------------------------------------------------------------
!  anmax(1:ngrill)  position of the right bounds
!                   of power spectrum P(n_parallel) (Can be neg).
!  anmax(1)=...     i=1,ngrill
!---------------------------------------------------------------------
!  nnkpar(1:ngrill)  number of points  of power spectrum
!                    P(n_parallel)
!  nnkpar(i)=...     i=1,ngrill
!----------------------------------------------------------------------
!  powers(1:ngrill)  power in one grill (MWatts)
!  (total power of grill(in MWatts) will be powtot=sum{powers}
!  powers(i)=...     i=1,ngrill
!-----------------------------------------------------------------------
!-----------------------------------------------------------------
!  Calculation of the small radius value near the plasma edge
!  where LH or FW have cutoff.  
!  i_rho_cutoff=0 (default) no calculations
!              =1 use these calculations
!-------------------------------------------------------------------
!  below are for i_n_poloidal=4 case, set (N_toroidal, N_poloidal)
----------------------------------------------------------------------
!  antormin(1:ngrill)  position of the left bound
!                   of power spectrum P(n_toroidal) (Can be neg).
!  antormin(i)=...     i=1,ngrill
!----------------------------------------------------------------------
!  antormax(1:ngrill)  position of the right bounds
!                   of power spectrum P(n_toroidal) (Can be neg).
!  antormax(1)=...     i=1,ngrill
!---------------------------------------------------------------------
!  nnktor(1:ngrill)  number of points  of power spectrum
!                    P(n_toroidal)
!  nnktor(i)=...     i=1,ngrill
!----------------------------------------------------------------------
!  anpolmin(1:ngrill)  position of the left bound
!                   of power spectrum P(n_poloidal) (Can be neg).
!  anpolmin(i)=...     i=1,ngrill
!----------------------------------------------------------------------
!  anpolmax(1:ngrill)  position of the right bounds
!                   of power spectrum P(n_poloidal) (Can be neg).
!  anpolmax(1)=...     i=1,ngrill
!---------------------------------------------------------------------
!  nnkpol(1:ngrill)  number of points  of power spectrum
!                    P(n_poloidal)
!  nnkpol(i)=...     i=1,ngrill
!---------------------------------------------------------------------
 &grill
 i_n_poloidal=2
 i_rho_cutoff=1
 ngrill=1
 igrillpw=1
 rhopsi0(1)=0.983d+00 
 thgrill(1)=+3.05d+0 
 phigrill(1)=+0.0d+0 
 height(1)=1.6d+0 
 nthin(1)=1  
 anmin(1)=-21.629d+0   
 anmax(1)=-21.629d+0   
 nnkpar(1)=1 
 powers(1)=2.4d+0  
 rho_step_find_LHFW_cutoff=1.d-3
 rho_initial_find_LHFW_cutoff=0.998d0
 &end

!/eccone/
!--------------------D3D--EC---------------------------------------------
!     ECR cone  for istart=1 (outside the plasma)	
!     zst (m)   initial z of the cone vertex
!     rst(m)    initial r of the cone vertex
!     phist(degree) initial phi of cone vertex
!     betast(degree) poloidal angle
!     alfast(degree) toroidal angle
!     alpha1(degree) angle cone width
!     alpha2(degree) starting angle along cone
!     na1 number of cones (0 for centarl ray only)
!     na2 number of rays at cone(for na1.ge.0)
!     powtot total power from antenna(MWt)
!-----------------------------------------------------------------
 &eccone
 zst=0.0d+0
 rst=2.4d+00
 phist=+0.000d+0
 betast=-0.d+0
 alfast=-176.33d+0
 alpha1=4.6500d+00
 alpha2=+1.500d+1
 na1=0
 na2=30
 powtot=1.0d-00
 &end

!/dentab/
!--------------------------------------------------------------------------
! density profiles (table data, case: idens=1)	dens1(ndensa,ncompa)
!--------------------------------------------------------------------------
! ndensa (a parameter) is a maximal number of points on small radius direction
! ndens (variable)     is a number of points on small radius direcrtion
! ncompa (a parameter) is a maximal number of plasma components
! nbulk (variable)    is number of plasma components must be: nbulk.le.ncompa
!                     (first component is for electrons)
! nbulk1 is number of densities components which should be given
! nbulk1 was calculated in dinit_mr subroutine ,
! The fragment of dinit_mr is given here to understand the
! nbulk1 value
!--------------------------------------------------------------------------
!c     calculation of nbulk1
!      if(((izeff.eq.0).or.(izeff.eq.2)).or.(izeff.eq.3)) then
!c        izeff=0, zeff will be calculated using the given ions;
!c                 electron density will be calculated using ion's densities;
!c             =1  ion densities nbulk and nbulk-1 will be calculated  using
!c                 Zeff, electon density and ion's densities(i), i=2,nbulk-1;
!c        izeff=2, zeff will not coincide with the plasma components
!c             =3  it uses eqdsk pres (pressure) and ions densities_i
!c                 for i=2,... nbulk
!c                 Let temperature T_E=T_i
!c                 pres=dens1(k,1)*temp1(k,1)+
!c                      Sum(i=2,nbulk)(dens1(k,i)*temp1(k,i)
!c                 In this case we will calculate Zeff(rho),
!c                 dens_electron(rho) and T_e(rho)=T_i(rho)
!c             =4  it uses eqdsk pres (pressure), zeff,ions densities
!c                 for i=2,... nbulk-2 (nbulk>2) and T_e(rho),T_i(rho)
!c                 pres=dens1(k,1)*temp1(k,1)+
!c                      Sum(i=2,nbulk)(dens1(k,i)*temp1(k,i)
!c                 In this case we will calculate dens_electron(rho) and
!c                 ion densities for i=nbulk and i=nbulk-1)
!         nbulk1=nbulk
!      else
!c        izeff=1, zeff is given, the ions component will be calculated
!         if (nbulk.eq.1) nbulk1=1
!         if (nbulk.eq.2) then
!	    write(*,*)'nbulk=2 Zeff must be equal charge(2) control it'
!	    write(*,!)'use the option izeff=0'
!	    nbulk1=2
!	    stop
!	 endif
!         if (nbulk.gt.2) nbulk1=nbulk-2
!      endif !izeff
!------------------------------------------------------------------------
! dens1(ndens,nbulk1) (10!!3/cm!!3)
!------------------------------------------------------------------------
! If  ((izeff.eq.0).or.(izeff.eq.3)) then the electron density
! will be calculated from the charge neutrality.
! In that case we can set the arbitrary values for the electron density
! dens1(k,1), k=1:ndens and should set nbulk1-1 ion densities:
! dens1(k,i), k=1:ndens, i=2:nbulk1.
! It was proposed the constant radial step,
! The first line (k=1, i=1:nbulk1) dens1(1,i) is for rho=0
! The last line (k=ndens, i=1:nbulk1) dens1(ndens,i) is for rho=1
! The example for  izeff=0, ndens=5, nbulk1=3, ncompa=4
!                 (here the first and lust  coloumns can be arbitrary)
!         electron-1 ion-2  ion-nbulk1 ion-ncompa
! prof=      0.,     1.2,   1.3,       0.,
!            0.,     2.2,   2.3,       0.,
!            0.,     3.2,   3.3,       0.,
!            0.,     4.2,   4.3,       0.,
!            0.,     5.2,   5.3,       0.
! ------------------------------------------------------------------------
! Here array prof(ncop,ndens) was used for convenience in namelist.
! dens1(k,i)=prof(i,k) k=1:ndens, i=1:ncompa
! ------------------------------------------------------------------------
! If (izeff.ne.0) and (izeff.ne.3) then we should set the electron density
! dens1(k,1)  and ion densities dens1(k,i) i=2:nbulk1
!------------------------------------------------------------------------
 &dentab
 prof    = 0.0,       1.36341,      0.0717585,      0.0840415,
           0.0,	      1.34911,      0.0710057,      0.0831599,
           0.0,	      1.30851,      0.0688691,      0.0806574,
           0.0,	      1.24544,      0.0655495,      0.0767697,
           0.0,	      1.16691,      0.0614165,      0.0719292,
           0.0,	      1.08132,      0.0569115,      0.0666531,
           0.0,	     0.996252,      0.0524343,      0.0614095,
           0.0,	     0.917276,      0.0482777,      0.0565415,
           0.0,	     0.847198,      0.0445894,      0.0522218,
           0.0,	     0.786164,      0.0413771,      0.0484596,
           0.0,	     0.732526,      0.0385540,      0.0451534,
           0.0,	     0.684088,      0.0360046,      0.0421676,
           0.0,	     0.639220,      0.0336432,      0.0394019,
           0.0,	     0.597430,      0.0314437,      0.0368259,
           0.0,	     0.559272,      0.0294354,      0.0344739,
           0.0,	     0.525844,      0.0276760,      0.0324133,
           0.0,	     0.498193,      0.0262207,      0.0307089,
           0.0,	     0.476520,      0.0250800,      0.0293729,
           0.0,	     0.453417,      0.0238641,      0.0279489,
           0.0,	     0.347096,      0.0182682,      0.0213952,
           0.0,	  1.00000e-05,    1.00000e-05,    1.00000e-05,
 &end

!/temtab/
!--------------------------------------------------------------------------
! temperature profiles (table data, case: ineds=1)	temp1(ndens,ncompa)
! Average temperature temp1=(T_parallel+2*T_perp)/3
!--------------------------------------------------------------------------
! It this namelist we must set electron temp1(ndens,1) and all ion
! species temp1(ndens,i) temperature (keV) {i=2:nbulk}
! Constant radial step is assumed.
! The first line (k=1, i=1:nbulk) temp1(1,i) is for rho=0
! The last line (k=ndens, i=1:nbulk) temp1(ndens,i) is for rho=1
! The example for   ndens=5, nbulk=3, ncompa=4
!                 (here the last  coloumns can be arbitrary)
!         electron-1 ion-2  ion-nbulk ion-ncomp
! prof=      0.,     1.2,   1.3,       0.,
!            0.,     2.2,   2.3,       0.,
!            0.,     3.2,   3.3,       0.,
!            0.,     4.2,   4.3,       0.,
!            0.,     5.2,   5.3,       0.
! ------------------------------------------------------------------------
! Here array prof(ncop,ndens) was used for convenience in namelist.
! temp1(k,i)=prof(i,k) k=1:ndens, i=1:ncompa
! ------------------------------------------------------------------------
 &temtab
 prof =        3.32431,       2.49323,        2.49323,        2.49323,
               3.23567,	      2.42675,        2.42675,        2.42675,
               2.98546,	      2.23909,        2.23909,        2.23909,
               2.60148,	      1.95111,        1.95111,        1.95111,
               2.13413,	      1.60060,        1.60060,        1.60060,
               1.64438,	      1.23329,        1.23329,        1.23329,
               1.18923,	     0.891920,       0.891920,       0.891920,
              0.812201,	     0.609151,       0.609151,       0.609151,
              0.536431,	     0.402324,       0.402324,       0.402324,
              0.362858,	     0.272144,       0.272144,       0.272144,
              0.274078,	     0.205559,       0.205559,       0.205559,
              0.242308,	     0.181731,       0.181731,       0.181731,
              0.238561,	     0.178921,       0.178921,       0.178921,
              0.239751,	     0.179814,       0.179814,       0.179814,
              0.231982,	     0.173987,       0.173987,       0.173987,
              0.210193,	     0.157645,       0.157645,       0.157645,
              0.175567,	     0.131676,       0.131676,       0.131676,
              0.132433,	    0.0993247,      0.0993247,      0.0993247,
             0.0856802,	    0.0642602,      0.0642602,      0.0642602,
             0.0397246,	    0.0297935,      0.0297935,      0.0297935,
           1.00000e-06,	  1.00000e-06,    1.00000e-06,    1.00000e-06,
 &end

!/tpoptab/
!--------------------------------------------------------------------------
! Tpop=T_perp/T_parallel profiles (table data, case: idens=1) 
|      tpop1(ndens,ncomp)
!--------------------------------------------------------------------------
! It this namelist we must set electron tpop1(ndens,1) and all ion
! species tpop1(ndens,i)  {i=2:nbulk}
! Constant radial step is assumed.
! The first line (k=1, i=1:nbulk) tpop1(1,i) is for rho=0
! The last line (k=ndens, i=1:nbulk) tpop1(ndens,i) is for rho=1
! The example for   ndens=5, nbulk=3, ncompa=4
!                 (here the last  coloumns can be arbitrary)
!         electron-1 ion-2  ion-nbulk ion-ncomp
! prof=      1.,     1.2,   1.3,       0.,
!            1.,     1.2,   2.3,       0.,
!            1.,     1.2,   3.3,       0.,
!            1.,     4.2,   4.3,       0.,
!            1.,     5.2,   5.3,       0.
! ------------------------------------------------------------------------
! Here array prof(ncop,ndens) was used for convenience in namelist.
! tpop1(k,i)=prof(i,k) k=1:ndens, i=1:ncompa
! ------------------------------------------------------------------------
 &tpoptab
 prof=    1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0,
          1.0,  1.0,  1.0,   1.0
 &end

!/vflowtab/
!--------------------------------------------------------------------------
! vflow  profiles (table data, case: idens=1) 
|      vdflow1(ndens,ncompa) is the drift velocity || B (v/sec)
!--------------------------------------------------------------------------
! It this namelist we must set drift velocity for electrons vflow1(ndens,1)
| and all ion species vflow1(ndens,i)  {i=2:nbulk}
! It was proposed the constant radial step,
! The first line (k=1, i=1:nbulk) vflow1(1,i) is for rho=0
! The last line (k=ndens, i=1:nbulk) vflow1(ndens,i) is for rho=1
! The example for   ndens=5, nbulk=3, ncompa=4
!                 (here the last  coloumns can be arbitrary)
!         electron-1 ion-2  ion-nbulk ion-ncomp
! prof=      1.,     1.2,   1.3,       0.,
!            1.,     1.2,   2.3,       0.,
!            1.,     1.2,   3.3,       0.,
!            1.,     4.2,   4.3,       0.,
!            1.,     5.2,   5.3,       0.
! ------------------------------------------------------------------------
! Here array prof(ncop,ndens) was used for convenience in namelist.
! vflow1(k,i)=prof(i,k) k=1:ndens, i=1:ncompa
! ------------------------------------------------------------------------
 &vflowtab
 prof=    0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.,
          0.0,  0.0,  0.,   0.
 &end


!/zeftab/
!--------------------------------------------------------------------------
! Zeff profiles (table data, case: idens=1)	zeff1(ndens)
!--------------------------------------------------------------------------
! It this namelist we must set zeff1(ndens)
! It was proposed the constant radial step.
! The first value  zeff1(1) is for rho=0
! The last value zeff2(ndens) is for rho=1
! The example for  ndens=5
! zeff1= 1., 1., 1., 1. 1.
!--------------------------------------------------------------------------
 &zeftab
 zeff1=21*1.0
 &end

!/read_diskf/
!   i_diskf=0 usage of the analytical maxwellian electron distribution 
!   i_diskf=1 reading the file diskf
!   i_diskf=2 reading the file netcdfnm.nc 
!   i_diskf=3 analitical calculation of the non-maxwellian disribution
!------------------------------------------------------
!   the data for analytic non-Maxwellian electron distribution
!    
!   jx   - the number of used normalized momentum mesh points
!   lrz  - the number of used radial mesh points
!   iym  - the number of used pitch-angle mesh points 
!          (here assumed the same at each radius)
!   ngen - the number of plasma species (here we use only electron specie
!          with the number of specie k=1) 
!   jxa,iya,lrza,ngena ! the max values for jx,iym,lrz,ngen 
!   rtem0 - relation tem0/electron_temperature(rho=0)
!           tem0 is the max energy for the momentum normalization (KeV) 
!-----tail parameters
!     f_tail=H(rho,rt1,rt2)*f_rel_Maxw(ttail),
!     H(x,x1,x2) is the box function. H=1 for x1<x<x2 otherwise H=0  
!   r1t,r2t    small normalized radii for the tail localization  
!   rtail      the relation the tail density to the total density
!   ttail      tail temperature (KeV)!tail temperature (KeV)
!-----hot parameters
!     f_hot=H(rho,rh1,rh2)*H(epar,hotmnpar,hotmxpar)
!           *H(eper,hotmnper,hotmxper)*(p_per/mc)**hotexp
!           *exp{-mu(thotpar)(p_par/m_ec)**2-mu(thotper)(p_per/m_ec)**2}.
!     Here mu(T)=m_e*c**2/T  
!   r1h,r2h            - small normalized radii for the hot localization
!   rhot               - the relation of hot density to the total density
!   thotpar,thotper    - parallel and perpendicular hot temperatures (KeV)
!   hotmnpar,hotmxpar  - the boundaries of the parallel energy box(KeV)
!                        hotmnpar < epar < hotmxpar  
!   hotmnper,hotmxper  - the boundaries of the perpendicular energy box(KeV)
!                        hotmnper < eper < hotmxper  
!   hotexp             - the degree of the perpendicular momentum:
!                                                      (p_per/mc)**hotexp
!-----beam parameters
!     f_beam=H(rho,rb1,rb2)*exp{-0.5*mu(tbeam)*
!              [(p_par-p_beam_par)**2+(p_per-p_beam_per)**2]/(m_e*c)**2}
!     Here
!          (p_beam /m_e*c)**2=ebeam**2/(m_e**2*c**4)-1
!           p_beam_par=p_beam*cos(thbeam)
!           p_beam_per=p_beam*sin(thbeam)
!   r1b,r2b      - small normalized radii for the beam localization
!   rbeam        - the relation of the beam density to the total density
!   ebeam        - beam energy (KeV)
!   thbeam       - beam pitch angle (0=<degree=<180) 
!   tbeam        - beam temperature (KeV)
!--------------------------------------------------------------------
 &read_diskf
 i_diskf=0
 netcdfnm='netcdfnm.nc'
 jx=200
 lrz=20
 iym=100  
 ngen=1  
 rtem0=10.d0
 r1t=1.d0
 r2t=0.d0      
 rtail=0.0d0      
 ttail=1.d0
 r1h=1.d0
 r2h=0.d0          
 rhot=2.5d-3            
 thotpar=1.d0
 thotper=1.d0     
 hotmnpar=1.d0
 hotmxpar=2.d0   
 hotmnper=1.d0
 hotmxper=2.d0    
 hotexp=0.d0    
 r1b=1.d0
 r2b=2.d0     
 rbeam=0.d0        
 ebeam=1.d0       
 thbeam=30.d0       
 tbeam=1.d0   
 &end


!--------------------------------------------------
!/emission/ 
!the data for emission calcultions
!   i_emission=0 no emission
!             =1 emission calculations
!
!   0<tol_emis=<1 tolerance parameter to add the new mesh point s_n
!                if in_0(n)>tol_emis*i_0 
!   nharm1=< nharm =<nharm2 gives the used EC harmonics (Not work now)
!   nfreq=<nfreqa (see param.i) is the number of frequences
!         nfreq=1 gives detailed plots of emission from a single ray
!         nfreq.gt.1 gives spectra covering the specified frequency
!         range
!   if nfreq=1 code will use the frequency determined by 
!              frqncy(GHZ) given in namelist wave
!   freq00=<freq01 are ratios of the minimal and maximal emission
!         frequencies to the central electron gyro-frequency
!         f_ce(rho=0)
!          
!    wallr is the wall reflection coefficient, {0=< wallr =<1}
!
!    i_rrind chooses the subroutine to calculate N_ray (default =0)
!      i_rrind=0  N_ray=N
!      i_rrind =1 from cold electron plasma using rrind   
!      i-rrind =2 from hot non-relativistic dispersion relation  
!--------------------------------------------------
!    i_r_2nd_harm=1 to calculate the major radius of the EC 2nd harmonic
!                =0 do not calculate (default =0) 
!              (to use drawemfr.in file i_r_2nd_harm=1)
!              (to use drawemf1.in file i_r_2nd_harm=0)
!---------------------------------------------------
 &emission
 i_emission=0
 tol_emis=5.0d-3
 nharm1=1
 nharm2=1
 nfreq=5
 freq00=0.585d0
 freq01=0.885d0
 wallr=0.9d0
 i_rrind=1
 i_r_2nd_harm=0
 &end





IDL> print & print
IDL> for i=0,3 do for j=0,10 do print,rho[j*10],10.*den_rho[i,j*10]
      0.00000      1.93942
    0.1000000      1.86133
     0.200000      1.65991
     0.300000      1.41714
     0.400000      1.20512
     0.500000      1.04200
     0.600000     0.909275
     0.700000     0.795550
     0.800000     0.708667
     0.900000     0.644975
      1.00000  1.00000e-05
      0.00000      1.36341
    0.1000000      1.30851
     0.200000      1.16691
     0.300000     0.996252
     0.400000     0.847198
     0.500000     0.732526
     0.600000     0.639220
     0.700000     0.559272
     0.800000     0.498193
     0.900000     0.453417
      1.00000  1.00000e-05
      0.00000    0.0717585
    0.1000000    0.0688691
     0.200000    0.0614165
     0.300000    0.0524343
     0.400000    0.0445894
     0.500000    0.0385540
     0.600000    0.0336432
     0.700000    0.0294354
     0.800000    0.0262207
     0.900000    0.0238641
      1.00000  1.00000e-05
      0.00000    0.0840415
    0.1000000    0.0806574
     0.200000    0.0719292
     0.300000    0.0614095
     0.400000    0.0522218
     0.500000    0.0451534
     0.600000    0.0394019
     0.700000    0.0344739
     0.800000    0.0307089
     0.900000    0.0279489
      1.00000  1.00000e-05


IDL> for i=0,3 do for j=0,10 do print,rho[j*10],temp_rho[i,j*10]
      0.00000      3.32431
    0.1000000      2.98546
     0.200000      2.13413
     0.300000      1.18923
     0.400000     0.536431
     0.500000     0.274078
     0.600000     0.238561
     0.700000     0.231982
     0.800000     0.175567
     0.900000    0.0856802
      1.00000  -0.00271658
      0.00000      2.49323
    0.1000000      2.23909
     0.200000      1.60060
     0.300000     0.891920
     0.400000     0.402324
     0.500000     0.205559
     0.600000     0.178921
     0.700000     0.173987
     0.800000     0.131676
     0.900000    0.0642602
      1.00000  -0.00203743
      0.00000      2.49323
    0.1000000      2.23909
     0.200000      1.60060
     0.300000     0.891920
     0.400000     0.402324
     0.500000     0.205559
     0.600000     0.178921
     0.700000     0.173987
     0.800000     0.131676
     0.900000    0.0642602
      1.00000  -0.00203743
      0.00000      2.49323
    0.1000000      2.23909
     0.200000      1.60060
     0.300000     0.891920
     0.400000     0.402324
     0.500000     0.205559
     0.600000     0.178921
     0.700000     0.173987
     0.800000     0.131676
     0.900000    0.0642602
      1.00000  -0.00203743






























